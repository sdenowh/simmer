name: Build & Ship Simmer (Direct Distribution)

permissions:
  contents: write

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest

    env:
      TEAM_ID: ${{ secrets.TEAM_ID }}
      BUNDLE_ID: ${{ secrets.BUNDLE_ID }}

    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Setup Xcode"
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "26.0.1"

      - name: "Cache Xcode derived data"
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-xcode-${{ hashFiles('**/*.xcodeproj') }}
          restore-keys: |
            ${{ runner.os }}-xcode-

      # ----------------------------
      # UNSIGNED BUILDS (PRs / non-tags)
      # ----------------------------
      - name: "Build (unsigned for PRs & non-tag pushes)"
        if: github.event_name == 'pull_request' || (github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/v'))
        run: |
          set -euo pipefail
          xcodebuild -project Simmer.xcodeproj \
            -scheme Simmer \
            -configuration Release \
            -derivedDataPath build \
            CODE_SIGNING_ALLOWED=NO \
            build

      - name: "Create app bundle (unsigned)"
        if: github.event_name == 'pull_request' || (github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/v'))
        run: |
          set -euo pipefail
          APP_PATH="$(/usr/bin/find build/Build/Products -type d -name 'Simmer.app' -path '*/Release/*' -print -quit || true)"
          if [ -z "$APP_PATH" ]; then
            echo "::error::Could not find Simmer.app under build/Build/Products (did the scheme build an app?)"
            /usr/bin/find build -maxdepth 4 -type d -name '*.app' -print || true
            exit 1
          fi
          echo "Found app at: $APP_PATH"
          rm -rf Simmer.app
          cp -R "$APP_PATH" Simmer.app

          rm -f Simmer-unsigned.dmg
          mkdir -p dmg_temp
          cp -R "Simmer.app" dmg_temp/
          hdiutil create -volname "Simmer" -srcfolder dmg_temp -ov -format UDZO Simmer-unsigned.dmg
          rm -rf dmg_temp

      - name: "Upload unsigned artifacts"
        if: github.event_name == 'pull_request' || (github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/v'))
        uses: actions/upload-artifact@v4
        with:
          name: simmer-unsigned
          path: |
            Simmer.app
            Simmer-unsigned.dmg

      # ----------------------------
      # SIGNED + NOTARIZED RELEASE BUILDS (tags v*)
      # ----------------------------

      - name: "Fail fast if required secrets are missing"
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          APPLE_ISSUER_ID: ${{ secrets.APPLE_ISSUER_ID }}
          APPLE_KEY_ID: ${{ secrets.APPLE_KEY_ID }}
          APPLE_API_KEY_P8: ${{ secrets.APPLE_API_KEY_P8 }}
          SPARKLE_PRIVATE_KEY: ${{ secrets.SPARKLE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          require() { test -n "${!1:-}" || { echo "::error::Missing secret/env: $1"; exit 1; }; }
          require TEAM_ID
          require BUNDLE_ID
          require APPLE_ISSUER_ID
          require APPLE_KEY_ID
          require APPLE_API_KEY_P8
          require SPARKLE_PRIVATE_KEY

      - name: "Import Developer ID signing cert"
        if: startsWith(github.ref, 'refs/tags/v')
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.DEV_ID_CERT_P12 }}
          p12-password: ${{ secrets.DEV_ID_CERT_PASSWORD }}

      - name: "Sanity check / pick Developer ID identity"
        if: startsWith(github.ref, 'refs/tags/v')
        id: pick_identity
        run: |
          set -euo pipefail
          security find-identity -v -p codesigning | sed 's/^/IDENTITY: /'
          CN="$(security find-identity -v -p codesigning | sed -n "s/.*Developer ID Application: \(.*\) (${TEAM_ID}).*/Developer ID Application: \1 (${TEAM_ID})/p" | head -n1)"
          if [ -z "$CN" ]; then
            echo "::error::No 'Developer ID Application: … (${TEAM_ID})' identity installed."
            exit 1
          fi
          echo "Using identity: $CN"
          echo "IDENTITY=$CN" >> "$GITHUB_OUTPUT"

      - name: "Build (Release, no signing in build phase)"
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          set -euo pipefail
          xcodebuild -project Simmer.xcodeproj \
            -scheme Simmer \
            -configuration Release \
            -derivedDataPath build \
            CODE_SIGNING_ALLOWED=NO \
            build

      - name: "Create app bundle (to sign)"
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          set -euo pipefail
          APP_PATH="$(/usr/bin/find build/Build/Products -type d -name 'Simmer.app' -path '*/Release/*' -print -quit || true)"
          if [ -z "$APP_PATH" ]; then
            echo "::error::Could not find Simmer.app under build/Build/Products (did the scheme build an app?)"
            /usr/bin/find build -maxdepth 4 -type d -name '*.app' -print || true
            exit 1
          fi
          echo "Found app at: $APP_PATH"
          rm -rf Simmer.app
          cp -R "$APP_PATH" Simmer.app

      - name: "Sanity check / bundle identifier matches"
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          set -euo pipefail
          ACTUAL=$(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "Simmer.app/Contents/Info.plist")
          echo "Declared BUNDLE_ID (secret): ${BUNDLE_ID}"
          echo "Built app CFBundleIdentifier: ${ACTUAL}"
          if [ "${ACTUAL}" != "${BUNDLE_ID}" ]; then
            echo "::error::Bundle ID mismatch. Expected ${BUNDLE_ID}, found ${ACTUAL}"
            exit 1
          fi

      - name: "Codesign app (Developer ID + Hardened Runtime)"
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          IDENTITY: ${{ steps.pick_identity.outputs.IDENTITY }}
        run: |
          set -euo pipefail
          ENT="Simmer/Simmer.entitlements"
          ENT_FLAG=""
          if [ -f "$ENT" ]; then
            echo "Using entitlements: $ENT"
            ENT_FLAG="--entitlements $ENT"
          fi
          /usr/bin/codesign --deep --force --options runtime --timestamp \
            --sign "$IDENTITY" $ENT_FLAG \
            "Simmer.app"

          echo "Verifying signature…"
          /usr/bin/codesign --verify --deep --strict --verbose=2 "Simmer.app"
          /usr/sbin/spctl --assess --type execute --verbose=4 "Simmer.app" || true

      - name: "Create DMG (signed app inside)"
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          set -euo pipefail
          rm -f Simmer.dmg
          mkdir -p dmg_temp
          cp -R "Simmer.app" dmg_temp/
          hdiutil create -volname "Simmer" -srcfolder dmg_temp -ov -format UDZO Simmer.dmg
          rm -rf dmg_temp

      - name: "Validate Apple API key (notarytool)"
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          APPLE_ISSUER_ID: ${{ secrets.APPLE_ISSUER_ID }}
          APPLE_KEY_ID: ${{ secrets.APPLE_KEY_ID }}
          APPLE_API_KEY_P8: ${{ secrets.APPLE_API_KEY_P8 }}
        run: |
          set -euo pipefail
          echo "$APPLE_API_KEY_P8" > AuthKey.p8
          chmod 600 AuthKey.p8
          xcrun notarytool store-credentials "ac-creds" \
            --key AuthKey.p8 \
            --key-id "$APPLE_KEY_ID" \
            --issuer "$APPLE_ISSUER_ID" \
            --validate
          rm -f AuthKey.p8

      - name: "Notarize DMG (wait for result)"
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          APPLE_ISSUER_ID: ${{ secrets.APPLE_ISSUER_ID }}
          APPLE_KEY_ID: ${{ secrets.APPLE_KEY_ID }}
          APPLE_API_KEY_P8: ${{ secrets.APPLE_API_KEY_P8 }}
        run: |
          set -euo pipefail
          echo "$APPLE_API_KEY_P8" > AuthKey.p8
          chmod 600 AuthKey.p8
          xcrun notarytool submit "Simmer.dmg" \
            --key AuthKey.p8 \
            --key-id "$APPLE_KEY_ID" \
            --issuer "$APPLE_ISSUER_ID" \
            --wait --output-format json > notarize.json
          rm -f AuthKey.p8

          STATUS="$(/usr/bin/python3 -c 'import json,sys;print(json.load(open("notarize.json")).get("status",""))')"
          ID="$(/usr/bin/python3 -c 'import json,sys;print(json.load(open("notarize.json")).get("id",""))')"
          echo "Notarization ID: ${ID}"
          echo "Notarization Status: ${STATUS}"
          if [ "${STATUS}" != "Accepted" ]; then
            echo "::error::Notarization failed or not accepted."
            exit 1
          fi

      - name: "Staple notarization (DMG)"
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          set -euo pipefail
          xcrun stapler staple "Simmer.dmg"
          /usr/sbin/spctl --assess --type open --verbose=4 "Simmer.dmg" || true

      # Create ZIP now (for Sparkle & release asset)
      - name: "Package app as zip"
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          set -euo pipefail
          rm -f Simmer.app.zip
          ditto -ck --sequesterRsrc --keepParent "Simmer.app" "Simmer.app.zip"
          shasum -a 256 "Simmer.dmg" "Simmer.app.zip" > checksums.txt

      # Notarize the APP so the Sparkle ZIP contains a stapled app (best UX)
      - name: "Notarize APP (for Sparkle ZIP)"
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          APPLE_ISSUER_ID: ${{ secrets.APPLE_ISSUER_ID }}
          APPLE_KEY_ID: ${{ secrets.APPLE_KEY_ID }}
          APPLE_API_KEY_P8: ${{ secrets.APPLE_API_KEY_P8 }}
        run: |
          set -euo pipefail
          echo "$APPLE_API_KEY_P8" > AuthKey.p8
          chmod 600 AuthKey.p8
          xcrun notarytool submit "Simmer.app" \
            --key AuthKey.p8 --key-id "$APPLE_KEY_ID" --issuer "$APPLE_ISSUER_ID" \
            --wait --output-format json > notarize-app.json
          rm -f AuthKey.p8
          STATUS="$(/usr/bin/python3 -c 'import json;print(json.load(open("notarize-app.json")).get("status",""))')"
          echo "App notarization status: ${STATUS}"
          [ "$STATUS" = "Accepted" ] || { echo "::error::App notarization failed"; exit 1; }

      - name: "Staple notarization (APP) and repackage ZIP"
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          set -euo pipefail
          xcrun stapler staple "Simmer.app"
          /usr/sbin/spctl --assess --type execute --verbose=4 "Simmer.app" || true
          rm -f Simmer.app.zip
          ditto -ck --sequesterRsrc --keepParent "Simmer.app" "Simmer.app.zip"
          shasum -a 256 "Simmer.dmg" "Simmer.app.zip" > checksums.txt

      # 1) Prepare updates/ for Sparkle (ZIP goes here)
      - name: "Sparkle: prepare updates folder"
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          set -euo pipefail
          rm -rf updates
          mkdir -p updates
          cp "Simmer.app.zip" updates/
          # Optional: cp release-notes HTML to updates/Simmer.app.html

      # 2) Install Sparkle CLI (generate_appcast)
      - name: "Install Sparkle CLI"
        if: startsWith(github.ref, 'refs/tags/v')
        uses: jozefizso/setup-sparkle@v1
        with:
          version: 2.8.0

      # 3) Generate appcast; pipe EdDSA private key via stdin (best practice)
      - name: "Sparkle: generate appcast with signatures & deltas"
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          SPARKLE_PRIVATE_KEY: ${{ secrets.SPARKLE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          cd updates
          printf "%s" "$SPARKLE_PRIVATE_KEY" | generate_appcast --ed-key-file - .
          ls -la

      # 4) Publish /updates to gh-pages:/simmer
      - name: "Publish appcast + zips to gh-pages:/simmer"
        if: startsWith(github.ref, 'refs/tags/v')
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: updates
          publish_branch: gh-pages
          destination_dir: simmer
          keep_files: true
          commit_message: "Update Sparkle feed for ${{ github.ref_name }}"

      # GitHub Release (DMG + ZIP + checksums)
      - name: "Create GitHub Release and upload assets"
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "Simmer ${{ github.ref_name }}"
          draft: false
          prerelease: ${{ contains(github.ref_name, '-rc') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') }}
          generate_release_notes: true
          files: |
            Simmer.dmg
            Simmer.app.zip
            checksums.txt

      - name: "Upload signed artifacts"
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: simmer-signed
          path: |
            Simmer.app
            Simmer.dmg
